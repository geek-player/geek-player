[{"title":"MyBatis","url":"/2023/05/21/MyBatis/","content":"Mybatis\n\n介绍\n对数据库中的表进行操作\n\n可以对数据库中的表进行操作的是JDBC\n\nJDBC是Java连接数据库的桥（方式）\n\n加载驱动（导入mysql-connector……）\n\nClass.forName(&quot;com.mysql.cj.jdbc.Driver&quot;); //反射\n\n\n建立连接\n\nString url = &quot;jdbc:mysql://localhost:3306/mybatis&quot;String username = &quot;root&quot; ;String password = &quot;root&quot; ;Connection connection = DriverManager.getConnection(url,username,password);\n\n\n创建PreparedStatement……\n\nString sql = &quot;SELECT * FROM user WHERE id = ?&quot;;PreparedStatement preparedStatement = connection.preparedStatem……(sql);preparedStatement.setInt(1,1);\n\n\nResultSet resultSet &#x3D; preparedStatement.executeQuery();\n\nif(resultSet.next())&#123;    System.sout,println(resultSet.getString(2));&#125;\n\n\n关闭（先开后关）\n\nresultSet.close();preparedStatement.close();connection.close();\n\n\nMyBatis项目\n\n\n\n缓存一级缓存：SqlSession（默认）\n二级缓存：Mapper\nSqlSessionFactory\n初始化MyBatis\n创建SqlSession\n全局唯一，存储在静态区\n\nSqlSession\n操作数据库核心，封装了JDBC加载驱动，建立链接，\n\n编写代码\n实体类：参考表结构与自己的需要\n\n接口类：dao层下的接口（抽象方法、默认方法和静态方法）\n\npublic int insert (User user);\npublic int update (User user);\npublic int delete (int id);\npublic User selectById(int id);\npublic List&lt;User&gt; select();\npublic User login(@Param(&#39;username&#39;) String username,@Param(&#39;password&#39;) String password)\n\n\n映射文件： \n\n映射文件路径一定与接口类路径一致\n\n映射文件名与类名一致\n\n映射文件中的namespace，写成接口类的全路径包名.接口类名、\n\n映射文件中的 id 就是接口类中的方法名（id不可能重复）\n\n映射文件中的parameterType，写的内容与接口类中的形参一致\n若形参的类型是基础类型或String，且只有一个，则默认可不写，可以自动映射\n若形参的类型是非基础类型或String，且只有一个，则需要在映射文件中写类名\n若形参的类型是两个及以上基础类型或String，映射文件建议使用@Param\n\n映射文件中的 resultType，写的是返回值类型（insert、delete、update无此属性）\n若是一个基础类型或String，则可以不写\n若是一个类或者集合，则直接写类名\n要求：列名与属性名、列名对应的类型与属性名对应的类型一致，若不满足如上要求使用resultMap\n\n\n\n\n\n堆：new方法\n栈：方法被调用\n方法区：类加载，所有方法加载到这里（包括静态方法）\n静态区：静态变量和常量\n\n","tags":["JavaEE"]},{"title":"SSM","url":"/2023/06/11/SSM/","content":"SSM项目开发\n设计表\n创建Web项目\n编写代码\n\n\nsrc\n\njava\n参考表操作\nentity&#x2F;bean&#x2F;model&#x2F;pojo\n\n\n对db操作，类，现有mybatis创建接口\nmapper&#x2F;dao\n\n\n接受controller的要求，根据dao的结果返回\nservice\n\n\n接受请求，调用service，返回给用户\ncontroller\n\n\n\n\nresource\n接口映射文件\nmapper&#x2F;dao\n\n\n加载所有配置文件\napplication.xml\n\n\n加载db.properties，配置连接池，sqlSessionFactory，tx，aop\nspring.xml\n\n\n视图解析器，释放静态资源，处理json数据，上传\nspringmvc.xml\n\n\n起别名，配置缓存，配置日志，加载映射文件\nmybatis.xml\n\n\n连接数据库的基础属性\ndb.properties\n\n\n日志\nlog…\n\n\n\n\nwebapp\nWEB-INF\nFilter过滤乱码，DispatcherServlet[加载applicationContext.xml]\nweb.xml\n\n\n编译后的字节码文件\nclasses\n\n\nindex.jsp\n\n\n\n\n\n\npom.xml\n\nspring-webmvc\nspring-tx\nspring-aspects\nspring-jdbc\nmybatis\nmybatis-spring\ndruid\njunit\nmysql-connector-java\n\n\n\n","tags":["JavaEE"]},{"title":"Spring","url":"/2023/05/21/Spring/","content":"Spring\n\n介绍版本\nSNAPSHOT：快照版（测试版）\nRELEASE：稳定版\nGA：正式版\nM：里程碑版\nRC：终测版\n\n特点\nIOC：控制反转换，以前的类需要自己new，现在可以直接从spring容器中取出（Bean注入）\n\nIOC容器里装的是配置的Bean或者类头上注解需要让spring帮我们创建的类（类的对象）\n\n依赖注入：Spring容器里装了所有需要的类对象，依赖spring创建类\n控制反转：Spring IOC 容器具有最高的权力，以前最高权力是自己\n\n\n以前自己建自己用，现在直接拿来用\nIOC  创建bean  →  类  →  对象\n\n\n\n\nAOP：面向切面编程，应用关注你该实现的，不负责其他关注点（事务、日志）\n\nMVC：整合Spring作用，企业级的解决方案\n\n轻量级框架\n\n轻量：1MB左右\n非侵入式：\n通过配置完成注入，易于在框架外使用，\nController类就是一个普通的类，但是可以作为控制层的入口\n\n\n框架：将简单的组件配置到一起（利用XML文件）\n\n\n侵入式：要求类必须继承或者实现框架中的内容，才可以实现效果，例如：struts 2\n\n\n\n给我们的开发带来了什么好处?\n\n更干净，更可管理\n\n\nentity&#x2F;model&#x2F;pojo –&gt; 表\ndao&#x2F;mapper –&gt; DB操作\nservice –&gt; 业务逻辑层，AOP切入\ncontroller –&gt; Servlet\nutile –&gt; 工具类\n\n海纳百川\nspring-jdbc：Spring可以与数据库建立关系，JPA\n\nSpring模块\nspring-context：IOC容器\nspring_core：IOC与DI的实现\nspring-beans：Bean工程\nspring-aop：AOP\nspring-jdbc：对JDBC的封装\nspring-tx：JDBC事务控制处理\nspring-web：对web基础支持\nspring-webmvc：实现SpringMVC\n\n\nIOC：控制反转，是一种思想\nDI：依赖注入，是思想的实现方式\n带来最大的好处就是解耦，以前需要自己new，每个类、模块之间都有密切的关系，一旦某个模块发生问题，整个系统瘫痪，耦合度太高（关系密切）\n想解耦，就要降低他们之间的关系，全部交给容器来控制（IOC）\n\n\n\n\n\nIOCspring-config.xml基础数据类型注入&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;       xmlns:c=&quot;http://www.springframework.org/schema/c&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;!-- 表示Spring帮我创建类，id要唯一 --&gt;    &lt;!-- &lt;bean id=&quot;user&quot; class=&quot;com.wxh.entity.User&quot;&gt; --&gt;    &lt;!-- 属性注入 通过set方法 --&gt;    &lt;bean id=&quot;user&quot; class=&quot;com.wxh.entity.User&quot; p:password=&quot;Administrator&quot;&gt;        &lt;!-- 中的属性名要根据set方法的方法名，而非实体类中的属性名 --&gt;        &lt;property name=&quot;username&quot; value=&quot;user&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 利用构造器插入属性值 通过构造方法 --&gt;    &lt;bean id=&quot;user1&quot; class=&quot;com.wxh.entity.User&quot;&gt;        &lt;!-- 中的属性名要根据set方法的方法名，而非实体类中的属性名 --&gt;        &lt;constructor-arg name=&quot;username&quot; value=&quot;user1&quot;/&gt;        &lt;constructor-arg name=&quot;password&quot; value=&quot;Administrator&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 若省略name，则需要根据形参列表的顺序写 --&gt;    &lt;bean id=&quot;user2&quot; class=&quot;com.wxh.entity.User&quot;&gt;        &lt;!-- 中的属性名要根据set方法的方法名，而非实体类中的属性名 --&gt;        &lt;constructor-arg value=&quot;user2&quot;/&gt;        &lt;constructor-arg value=&quot;Administrator&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 若省略name，且参数顺序与形参列表顺序不一致，则通过index指定是第几个参数的值 --&gt;    &lt;bean id=&quot;user3&quot; class=&quot;com.wxh.entity.User&quot;&gt;        &lt;!-- 中的属性名要根据set方法的方法名，而非实体类中的属性名 --&gt;        &lt;constructor-arg name=&quot;password&quot; value=&quot;Administrator&quot;/&gt;        &lt;constructor-arg name=&quot;username&quot; value=&quot;user3&quot; index=&quot;0&quot;/&gt;    &lt;/bean&gt;    &lt;!-- 利用c标签简化constructor-arg --&gt;    &lt;bean id=&quot;user4&quot; class=&quot;com.wxh.entity.User&quot; c:username=&quot;user4&quot; c:password=&quot;Administrator&quot;/&gt;&lt;/beans&gt;\n\n测试代码：\n@Testpublic void test() &#123;    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;classpath:spring-config.xml&quot;);    // System.out.println(applicationContext.getBean(User.class));    System.out.println(applicationContext.getBean(&quot;user&quot;));    System.out.println(applicationContext.getBean(&quot;user1&quot;));    System.out.println(applicationContext.getBean(&quot;user2&quot;));    System.out.println(applicationContext.getBean(&quot;user3&quot;));    System.out.println(applicationContext.getBean(&quot;user4&quot;));&#125;\n\n引用数据类型注入&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;bean id=&quot;test&quot; class=&quot;com.wxh.entity.Test&quot;&gt;        &lt;property name=&quot;list&quot;&gt;            &lt;list&gt;                &lt;value&gt;1&lt;/value&gt;                &lt;value&gt;2&lt;/value&gt;                &lt;value&gt;3&lt;/value&gt;            &lt;/list&gt;        &lt;/property&gt;        &lt;property name=&quot;set&quot;&gt;            &lt;set&gt;                &lt;value&gt;1&lt;/value&gt;                &lt;value&gt;2&lt;/value&gt;                &lt;value&gt;3&lt;/value&gt;            &lt;/set&gt;        &lt;/property&gt;        &lt;property name=&quot;map&quot;&gt;            &lt;map&gt;                &lt;entry key=&quot;张三&quot; value=&quot;zhangsan&quot;/&gt;                &lt;entry key=&quot;李四&quot; value=&quot;lsii&quot;/&gt;            &lt;/map&gt;        &lt;/property&gt;        &lt;property name=&quot;userList&quot;&gt;            &lt;list&gt;                &lt;bean id=&quot;user1&quot; class=&quot;com.wxh.entity.User&quot; p:username=&quot;普通用户&quot; p:password=&quot;nimda&quot;/&gt;                &lt;ref bean=&quot;user2&quot;/&gt;            &lt;/list&gt;        &lt;/property&gt;    &lt;/bean&gt;    &lt;bean id=&quot;user2&quot; class=&quot;com.wxh.entity.User&quot; p:username=&quot;管理员&quot; p:password=&quot;NIMDA&quot;/&gt;&lt;/beans&gt;\n\n测试代码：\n@Testpublic void test() &#123;    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;classpath:spring-test.xml&quot;);    System.out.println(applicationContext.getBean(&quot;test&quot;));&#125;\n\n当ApplicationContext实例化后，会将配置文件中所有的Bean注入到容器中（此时已经拥有所有Bean的对象）\n想让Spring帮忙创建类，类中必须要包含无参构造方法\n当加载配置文件时，配置中的所有Bean就会进入容器，此刻容器中就有了Bean对应类的对象名\n是否立即加载bean&lt;!-- 不立即加载， 只有使用或者子类被构建时才进行加载 --&gt;&lt;bean id=&quot;user&quot; class=&quot;com.wxh.entity.User&quot; abstract=&quot;true&quot;/&gt;&lt;!-- 继承user bean --&gt;&lt;bean id=&quot;user1&quot; class=&quot;com.wxh.entity.User1&quot; parent=“user&quot;/&gt;\n\nSpring默认单例&lt;!-- 只创建一次，一直存在，static，默认单例模式，由IOC容器创建，由IOC管理 --&gt;&lt;bean id=&quot;user&quot; class=&quot;com.wxh.entity.User&quot; abstract=&quot;true&quot;/&gt;&lt;!-- 多实例 --&gt;&lt;bean id=&quot;user1&quot; class=&quot;com.wxh.entity.User1&quot; parent=“user&quot; scope=&quot;prototype&quot;/&gt;\n\n注解// 声明在类的头部@Repository 仓库（Dao层），加上该注解可以让Spring控制@Controller 控制器@Service 业务层@Component 普通组件// 声明在属性上、set方法上（类中的那个属性想注入，就写在改属性头部即可）@Autowired \n\nAOPAOP使用场景：日志、事务、权限认证、安全检查\nAOP配置：\n通知\n环绕通知：在目标方法执行前后实施管理，通常用于日志、事务处理\n前置通知：在目标方法执行前，通常用于权限认证\n后置返回通知：在目标方法成功执行后，通常用于关闭流、删除临时文件等\n后置最终通知：在目标方法成功执行后，无论是否有异常，一定返回（finally），通常用于释放资源\n异常通知：方法抛出异常，通常用于异常处理\n引入通知：在目标类中新增一些属性和方法，通常用于修改目标类\n\n\n\nSpring—Mybatis","tags":["JavaEE"]},{"title":"SPringMVC","url":"/2023/06/11/SpringMVC/","content":"MVC：一种架构模式\nM：model\t\t数据和业务（service、mapper、entity）\nV：view\t\t视图\nC：controller\t中介、解耦、提高代码维护性\n\nServlet\n接受数据\n返回数据\n跳转\n转发\n重定向\n\n创建Servletimport javax.servlet.ServletRequest;import javax.servlet.ServletResponse;public class TestServlet extends HttpServlet &#123;  public void doGet(ServletRequest request, ServletResponse response) &#123;  &#125;  public void doPost(ServletRequest request, ServletResponse response) &#123;  &#125;&#125;\n配置Servlet&lt;web-app&gt;  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;TestServelct&lt;/servlet-name&gt;    &lt;servlet-class&gt;com.ambow.servlet.TestServelct&lt;/servlet-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;变量名&lt;/param-name&gt;      &lt;param-value&gt;写对应的值&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;!-- 项目启动时加载当前类 --&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;TestServelct&lt;/servlet-name&gt;    &lt;url-pattern&gt;/TestServlet&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;&lt;/web-app&gt;\nSpringMVC：\n基于SpringIOC容器运行 –&gt; 所有的controller交给Spring创建\n轻量级web mv框架，围绕DispatcherServlect，调用Servlet设计 –&gt; Servlet可做的，SpringMVC都可以做，而且更加强大\n\nSpringMVC开发步骤\n导入spring-webmvc\nweb.xml配置文件\n\nweb.xml&lt;web-app&gt;    &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;        &lt;init-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;param-value&gt;classpath:SpringMVC-config.xml&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;\n3.SpringMVC-config.xml配置文件  \nSpringMVC-config.xml&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;    &lt;context:component-scan base-package=&quot;com.wxh.controller&quot;/&gt;&lt;/beans&gt;\n\nController类\n接收数据：\n\n基本类型：变量名与传递的key一致可以自动类型转换\n自定义类：类中属性名与传递的key一致，就可以自动类型转换\n任意名称：@RequestParam(&quot;key&quot;) Object value\n\n\n跳转：\n\n传值方式\nModelAndView\nRequest\nSession\nModel\n\n\n跳转方式\nModelAndView\nrequest.getRequestDispatcher…\nresponse.sendRedirect…  默认返回值是String，则返回值位置写的字符串就是转发到对应的jsp名字若想转发到controller，需要返回值位置写”forward:index.jsp”重定向到jsp:”redirect:xx.jsp”controller:”redirect:controller请求地址”\n\n\n\n\nmapper.xml：\n\nnamespace: mapper类的全路径\nid：抽象方法名\nparameterType：形参\nresultType&#x2F;resultMap：数据返回类型\n\n\n\n\n\n","tags":["JavaEE"]},{"title":"Hello World","url":"/2023/01/05/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Ambow","url":"/2023/07/24/Ambow/","content":"Ambow\n\nDay-01Java特性面向对象（万物皆对象）：\n封装\n继承\n多态\n\nJDBCJDBC工具类package com.ambow.utils;import com.mysql.cj.jdbc.Driver;import java.sql.*;/** * @Author Admin * @create 2023/7/24 11:11 */public class JDBCUtils &#123;    /**     * 获取与MySQL数据努的连接     * @return 数据库连接     */    public static Connection getConnection()&#123;        Connection connection = null ;        Statement statement = null;        try &#123;            String url = &quot;jdbc:/mysql///demo&quot;;            String username = &quot;root&quot;;            String password = &quot;root&quot;;            String driver = &quot;com.mysql.cj.jdbc.Driver&quot;;            try &#123;                Class.forName(driver);            &#125; catch (ClassNotFoundException e) &#123;                throw new RuntimeException(e);            &#125;            return DriverManager.getConnection(url,username,password);        &#125; catch (SQLException sqlException) &#123;            throw new RuntimeException(sqlException);        &#125;    &#125;    /**     * 关闭数据库连接     */    public static void close(Statement statement, Connection connection)&#123;        try &#123;            statement.close();        &#125; catch (SQLException e) &#123;            throw new RuntimeException(e);        &#125;        try &#123;            connection.close();        &#125; catch (SQLException e) &#123;            throw new RuntimeException(e);        &#125;    &#125;    /**     * 关闭数据库连接     */    public static void close(Statement statement, Connection connection, ResultSet resultSet)&#123;        try &#123;            statement.close();        &#125; catch (SQLException e) &#123;            throw new RuntimeException(e);        &#125;        try &#123;            connection.close();        &#125; catch (SQLException e) &#123;            throw new RuntimeException(e);        &#125;        try &#123;            resultSet.close();        &#125; catch (SQLException e) &#123;            throw new RuntimeException(e);        &#125;    &#125;&#125;\n\n\n\n作业用递归的方式获取该路径下的所有目录\npublic class Main &#123;    public static void main(String[] args) &#123;        directory(&quot;D:/Java/jdk1.8&quot;);    &#125;    public static void directory(String path) &#123;        File file = new File(path);        if ( ! file.isDirectory() ) &#123;            return;        &#125;        for (String s : Objects.requireNonNull(file.list())) &#123;            System.out.println(path + &quot;/&quot; + s);        &#125;        for ( String dir : Objects.requireNonNull(file.list()) )&#123;            directory(path + &quot;/&quot; + dir);        &#125;    &#125;&#125;\n\n","tags":["Ambow"]}]